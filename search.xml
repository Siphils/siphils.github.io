<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Javascript 学习笔记（一）]]></title>
    <url>%2F2017%2F07%2F16%2FJavascript-notes-1%2F</url>
    <content type="text"><![CDATA[我的FreeCodeCamp编码集Javascript参考文档一位Javascript初学者的一些笔记，慢慢积累吧。体会到了懂得使用方法和不懂使用方法的巨大差别……下面是一些算法自己的实现以及与一些dalao的比较 Reverse a String 先把字符串转化成数组，再借助数组的reverse方法翻转数组顺序，最后把数组转化成字符串。 你的结果必须得是一个字符串 reverseString(&quot;hello&quot;) 应该返回一个字符串 reverseString(&quot;hello&quot;) 应该返回 &quot;olleh&quot; reverseString(&quot;Howdy&quot;) 应该返回 &quot;ydwoH&quot; reverseString(&quot;Greetings from Earth&quot;) 应该返回 &quot;htraE morf sgniteerG&quot; 部分提示:12345//String.split() //Example var str = "hello world"; var arr = str.split(" "); console.log(arr); // ["hello","wordl"] 12345//Array.reverse() //Example var arr = [1,2,3]; arr.reverse(); console.log(arr); // [3,2,1] 12345//Array.join() //Example var arr = ["hello","world"]; var newArr = arr.join(" "); console.log(newArr); // hello world 我的想法：先用String.split(&quot; &quot;)将一句话根据空格分割开得到一个新的数组，然后将获得的数组使用方法Array.reverse()获得倒转后的数组。将这个数组每一个元素（String）视作一个Array，然后二重循环，第二重循环从末尾开始直至首元素依次存入一个新的数组，然后再使用方法Array.join(&quot; &quot;)得到倒转后的String123456789101112131415function reverseString(str) &#123; var strArr = str.split(" "); strArr.reverse(); var newStr = ""; var newArr = []; for (var i = 0; i &lt; strArr.length; i++) &#123; for (var j = strArr[i].length - 1; j &gt; -1; j--) &#123; newStr += strArr[i][j]; &#125; newArr.push(newStr); newStr = ""; &#125; str = newArr.join(" "); return str;&#125; 然后是@forkerino（帮我解决过问题。。）的实现123function reverseString(str) &#123; return str.split("").reverse().join("");&#125; 从中理解的思路是直接用String.split(&quot;&quot;)将整个字符串分成一个个字母（包括空格在内）的一个数组，然后用Array.reverse()方法倒转，再用Array.join(&quot;&quot;)重新组成一个字符串。 Factorialize a Number 计算一个整数的阶乘 如果用字母n来代表一个整数，阶乘代表着所有小于或等于n的整数的乘积。 阶乘通常简写成 n! 例如: 5! = 1 2 3 4 5 = 120 factorialize(5) 应该返回一个数字 factorialize(5) 应该返回 120. factorialize(10) 应该返回 3628800. factorialize(20) 应该返回 2432902008176640000. factorialize(0) 应该返回 1. 我的想法：解决阶乘比较经典的解法之一大概是递归吧12345function factorialize(num) &#123; if (num &gt; 1) return num * factorialize(num - 1); else return 1;&#125; @forkerino dalao的解法123function factorialize(num) &#123; return num &gt; 1 ? num * factorialize(num - 1) : 1;&#125; ? : 一个运算符简化了if...else的写法 Check for Palindromes 检查回文字符串 如果给定的字符串是回文，返回true，反之，返回false。 如果一个字符串忽略标点符号、大小写和空格，正着读和反着读一模一样，那么这个字符串就是palindrome(回文)。 注意你需要去掉字符串多余的标点符号和空格，然后把字符串转化成小写来验证此字符串是否为回文。 函数参数的值可以为”racecar”，”RaceCar”和”race CAR”。 palindrome(&quot;eye&quot;) 应该返回一个布尔值 palindrome(&quot;eye&quot;) 应该返回 true. palindrome(&quot;race car&quot;) 应该返回 true. palindrome(&quot;not a palindrome&quot;) 应该返回 false. palindrome(&quot;A man, a plan, a canal. Panama&quot;) 应该返回 true. palindrome(&quot;never odd or even&quot;) 应该返回 true. palindrome(&quot;nope&quot;) 应该返回 false. palindrome(&quot;almostomla&quot;) 应该返回 false. palindrome(&quot;My age is 0, 0 si ega ym.&quot;) 应该返回 true. palindrome(&quot;1 eye for of 1 eye.&quot;) 应该返回 false. palindrome(&quot;0_0 (: /-\ :) 0-0&quot;) 应该返回 true. 这个用到了正则表达式，由于我不太会正则表达式，就参考了下@forkerino dalao的解法1234function palindrome(str) &#123; var cleanStr = str.replace(/\W|_/g, "").toLowerCase() return cleanStr === cleanStr.split("").reverse().join("");&#125; 其中的 clean.split(&quot;&quot;).reverse().join(&quot;&quot;) 是之前Reverse a String 中他用到的解法。 Find the Longest Word in a String 找出最长单词 在句子中找出最长的单词，并返回它的长度。 函数的返回值应该是一个数字。 findLongestWord(&quot;The quick brown fox jumped over the lazy dog&quot;) 应该返回一个数字 findLongestWord(&quot;The quick brown fox jumped over the lazy dog&quot;) 应该返回 6. findLongestWord(&quot;May the force be with you&quot;) 应该返回 5. findLongestWord(&quot;Google do a barrel roll&quot;) 应该返回 6. findLongestWord(&quot;What is the average airspeed velocity of an unladen swallow&quot;) 应该返回 8. findLongestWord(&quot;What if we try a super-long word such as otorhinolaryngology&quot;) 应该返回 19. 思路比较简单，直接上代码12345678function findLongestWord(str) &#123; str = str.split(" "); var strLenth = str[0].length; for (var i = 0; i &lt; str.length; i++) &#123; if (strLenth &lt; str[i].length) strLenth = str[i].length; &#125; return strLenth;&#125; @forkerino 的解法暂时看不懂，在聊天室里有人提示我可以使用 Math.max()，于是查阅了一下参考手册。1234567891011//Math.max() //Example Math.(1,2,3); //3 //为了得到数值数组，可以使用如下两种方法 //1.getMaxOfArray([1,2,3])等价于Math.max(1,2,3) function getMaxOfArray(numArray) &#123; return Math.max.apply(null, numArray);&#125;; //2.使用最新的扩展语句spread operator var arr = [1, 2, 3]; var max = Math.max(...arr); 重新整理了一下思路，修改为以下代码12345678function findLongestWord(str) &#123; var strArr = str.split(" "); var lenArr = []; for (var i = 0; i &lt; strArr.length; i++) lenArr.push(strArr[i].length); //return Math.max(...lenArr); return Math.max.apply(null, lenArr);&#125; Title Case a Sentence 句中单词首字母大写 确保字符串的每个单词首字母都大写，其余部分小写。 像’the’和’of’这样的连接符同理。 titleCase(&quot;I&#39;m a little tea pot&quot;) 应该返回一个字符串 titleCase(&quot;I&#39;m a little tea pot&quot;) 应该返回 &quot;I&#39;m A Little Tea Pot&quot;. titleCase(&quot;sHoRt AnD sToUt&quot;) 应该返回 &quot;Short And Stout&quot;. titleCase(&quot;HERE IS MY HANDLE HERE IS MY SPOUT&quot;) 应该返回 &quot;Here Is My Handle Here Is My Spout&quot;. 我的想法：先用 String.toLowerCase() 将字符串中所有字母换为小写， String.split() 然后将字符串分开为一个个字符串组成的数组，再利用 String.substr() 获得每个字符串的首字母作为一个字符串12345678910//String.substr() //Example var str = "abcdefghij"; console.log("(1,2): " + str.substr(1,2)); // (1,2): bc console.log("(-3,2): " + str.substr(-3,2)); // (-3,2): hi console.log("(-3): " + str.substr(-3)); // (-3): hij console.log("(1): " + str.substr(1)); // (1): bcdefghij console.log("(-20, 2): " + str.substr(-20,2)); // (-20, 2): ab console.log("(20, 2): " + str.substr(20,2)); // (20, 2): 再用 String.toUpperCase() 换成大写字母。1234567function titleCase(str) &#123; var strArr = str.toLowerCase().split(" "); for (var i = 0; i &lt; strArr.length; i++) strArr[i] = strArr[i].substr(0, 1).toUpperCase() + strArr[i].substr(1); str = strArr.join(" "); return str;&#125; @forkerino dalao的方法123function titleCase(str) &#123; return str.split(' ').map(v =&gt; v[0].toUpperCase() + v.slice(1).toLowerCase()).join(' ');&#125; 其中使用了 Array.prototype.map() 方法，先mark以后再看。 Return Largest Numbers in Arrays 找出多个数组中的最大数 右边大数组中包含了4个小数组，分别找到每个小数组中的最大值，然后把它们串联起来，形成一个新数组。 提示：你可以用for循环来迭代数组，并通过arr[i]的方式来访问数组的每个元素。 largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]) 应该返回一个数组 largestOfFour([[13, 27, 18, 26], [4, 5, 1, 3], [32, 35, 37, 39], [1000, 1001, 857, 1]]) 应该返回 [27,5,39,1001]. largestOfFour([[4, 9, 1, 3], [13, 35, 18, 26], [32, 35, 97, 39], [1000000, 1001, 857, 1]]) 应该返回 [9, 35, 97, 1000000]. 我的思路：使用二重循环，内层循环里直接挨个找最大值，外层循环用Array.push() 放进一个新的数组里1234567891011function largestOfFour(arr) &#123; var newArr = []; for (var i = 0; i &lt; arr.length; i++) &#123; var maxNum = arr[i][0]; for (var j = 0; j &lt; arr[i].length; j++) &#123; if (maxNum &lt; arr[i][j]) maxNum = arr[i][j]; &#125; newArr.push(maxNum); &#125; return newArr;&#125; 然后聊天室里有人提醒我可以用Math.max()，于是将代码修改如下1234567function largestOfFour(arr) &#123; var newArr = []; for (var i = 0; i &lt; arr.length; i++) newArr.push(Math.max.apply(null, arr[i])); //newArr.push(Math.max(arr[i) return newArr;&#125; @forkerinodalao的代码1234567891011121314151617const largestOfFour = (a) =&gt; a.map(b =&gt; Math.max(...b));/*function largestOfFour(arr) &#123; return arr.map(sa =&gt; Math.max(...sa));&#125;*//*function largestOfFour(arr) &#123; // You can do this! for (var i = 0; i &lt; arr.length; i++) &#123; arr[i].sort(function(a, b) &#123; return b - a; &#125;); arr[i] = arr[i][0]; &#125; return arr;&#125;*/ 看到Array.sort()，吓得我赶紧回头复习了一下相关的知识。 Confirm the Ending 检查字符串结尾 判断一个字符串 (str) 是否以指定的字符串 (target) 结尾。 如果是，返回true;如果不是，返回false。 confirmEnding(&quot;Bastian&quot;, &quot;n&quot;) 应该返回 true. confirmEnding(&quot;Connor&quot;, &quot;n&quot;) 应该返回 false. confirmEnding(&quot;Walking on water and developing software from a specification are easy if both are frozen&quot;, &quot;specification&quot;) 应该返回 false. confirmEnding(&quot;He has to give me a new name&quot;, &quot;name&quot;) 应该返回 true. confirmEnding(&quot;He has to give me a new name&quot;, &quot;me&quot;) 应该返回 true. confirmEnding(&quot;He has to give me a new name&quot;, &quot;na&quot;) 应该返回 false. confirmEnding(&quot;If you want to save our world, you must hurry. We dont know how much longer we can withstand the nothing&quot;, &quot;mountain&quot;) 应该返回 false. 我的想法：使用String.substr() 方法获取从String末尾开始的指定长度的字符串与target进行比对。123function confirmEnding(str, target) &#123; return (str.substr(-target.length) == target);&#125; @forkerino dalao的方法12345function confirmEnding(str, target) &#123; // "Never give up and good luck will find you." // -- Falcor return str.slice(-target.length) == target;&#125; 其中String.slice()和我使用的String.substr()是有所区别的（还有String.substring()，具体参考文档吧~~）。 Repeat a string repeat a string 重复输出字符串 （重要的事情说3遍） 重复一个指定的字符串 num次，如果num是一个负数则返回一个空字符串。 repeat(&quot;\*&quot;, 3) 应该返回 &quot;\*\*\*&quot; . repeat(&quot;abc&quot;, 3) 应该返回 &quot;abcabcabc&quot;. repeat(&quot;abc&quot;, 4) 应该返回 &quot;abcabcabcabc&quot;. repeat(&quot;abc&quot;, 1) 应该返回 &quot;abc&quot;. repeat(&quot;\*&quot;, 8) 应该返回 &quot;\*\*\*\*\*\*\*\*&quot;. repeat(&quot;abc&quot;, -2) 应该返回 &quot;&quot;. 我的想法：构造一个新的字符串，用循环按次数将旧的字符串连接到新的字符串中，再返回新的字符串。123456function repeat(str, num) &#123; var newStr = ""; for (var i = 1; i &lt;= num; i++) newStr += str; return newStr;&#125; @forkerino dalao的代码123456789function repeatStringNumTimes(str, num) &#123; // repeat after me return num &gt; 0 ? str.repeat(num) : ""; // var res = ""; // for (var i = 0; i&lt;num; i++)&#123; // res += str; // &#125; // return res;&#125; 嗯…这次知道了String.repeat()这个方法…（不得不说熟悉方法之后，好多问题都简单得不行） 整理和码字大概用了一两个小时吧，一边整理一边复习其实也有不小的收获。 Rome was not built in a day.]]></content>
      <categories>
        <category>学习笔记</category>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>FreeCodeCamp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[博客底部添加了一言]]></title>
    <url>%2F2017%2F07%2F15%2FAdd-Hitokoto-at-bottom%2F</url>
    <content type="text"><![CDATA[最近没什么事情做就随便加了点东西 一言- ヒトコト 简单来说，一言（ヒトコト）指的是就是一句话，可以是动漫中的台词，可以是小说中的语句，也可以是网络上的各种小段子。或是感动，或是开心，又或是单纯的回忆，来到这里，留下你所喜欢的那一句句话，与大家分享，这就是一言存在的目的。 Hitokoto API1.将下面这段代码放入HTML页面的head标签内1&lt;script type="text/javascript" src="http://api.hitokoto.us/rand?encode=js&amp;charset=utf-8"&gt;&lt;/script&gt; 2.将下面这段代码放入页面内需要展示一句话的位置即可1&lt;div id="hitokoto"&gt;&lt;script&gt;hitokoto()&lt;/script&gt;&lt;/div&gt;]]></content>
      <categories>
        <category>折腾</category>
      </categories>
      <tags>
        <tag>折腾</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一个粗糙简单的导航页面]]></title>
    <url>%2F2017%2F07%2F12%2FAn-simple-personal-index-page%2F</url>
    <content type="text"><![CDATA[对于一个不太熟悉HTML/CSS/JS的小白来说，弄出一个导航页的东西还是费了不少功夫。下午弄了一个coding pages，把导航页所有相关的东西全部放上面，把主域名siphils.com绑了上去，以后访问这个博客就要用blog.siphils.com啦没有响应式没有响应式没有响应式！（明天看看怎么搞出来）⊙﹏⊙ 估计改成响应式的时候要把垃圾代码全部改掉，布局也不太好。暂时就这样吧。。。]]></content>
      <categories>
        <category>折腾</category>
      </categories>
      <tags>
        <tag>折腾</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Github Page + hexo 搭建的新博客]]></title>
    <url>%2F2017%2F07%2F11%2FGithub-Page-hexo-new-blog%2F</url>
    <content type="text"><![CDATA[纠结了好久，最终还是决定从wordpress转移到这里，使用github page+hexo搭建博客（轻便啊！）暂时还是用着https://siphils.github.io 这个域名等我写好导航页之后再把域名绑定过来吧还有好多东西没怎么修改 懒…今天就弄这么多 等有时间了再慢慢逐渐修改吧（用修改一词不过只是在原主题的基础上做点小变动罢了）]]></content>
      <categories>
        <category>碎碎念</category>
      </categories>
      <tags>
        <tag>碎碎念</tag>
      </tags>
  </entry>
</search>